<?php


namespace SoleX\Blog\Utils;


use Illuminate\Support\Arr;
use Illuminate\Support\Collection;
use Illuminate\Support\Optional;
use JetBrains\PhpStorm\Pure;
use JsonException;
use JsonSerializable;

class TypeConverter extends Optional implements JsonSerializable
{
    #[Pure] public function toString(): string
    {
        return $this->__toString();
    }

    public function __toString(): string
    {
        if (is_string($this->value)) {
            return $this->value;
        }
        return (string)$this->value;
    }

    public function isNull(): bool
    {
        return null === $this->value || $this->value === 'null';
    }

    public function isEmpty(): bool
    {
        return empty($this->value);
    }

    public function toFloat(): float
    {
        if (is_float($this->value)) {
            return $this->value;
        }
        return (float)$this->value;
    }

    public function toCollection(): Collection
    {
        return collect($this->toArray());
    }

    public function toArray(): array
    {
        if (empty($this->value)) {
            return [];
        }
        if (is_array($this->value)) {
            return $this->value;
        }
        if (method_exists($this->value, 'toArray')) {
            return $this->value->toArray();
        }
        try {
            return json_decode($this->value, true, 512, JSON_THROW_ON_ERROR);
        } catch (JsonException) {
        }
        return Arr::wrap($this->value);
    }

    #[Pure] public function isTrue(): bool
    {
        return $this->toBool() === true;
    }

    public function toBool(): bool
    {
        if (is_bool($this->value)) {
            return $this->value;
        }

        return match ($this->value) {
            'true', '(true)' => true,
            'false', '(false)' => false,
            default => (bool)$this->value,
        };
    }

    #[Pure] public function isFalse(): bool
    {
        return $this->toBool() === false;
    }

    public function raw()
    {
        return $this->value;
    }

    public function toJson(): ?string
    {
        try {
            return json_encode($this->toArray(), JSON_THROW_ON_ERROR);
        } catch (JsonException $e) {
            return null;
        }
    }

    public function jsonSerialize(): array
    {
        return $this->toArray();
    }

    public function eq($value): bool
    {
        return $this->value === $value;
    }

    public function __get($key)
    {
        if (method_exists($this, $key)) {
            return $this->{$key}();
        }
        return parent::__get($key); // TODO: Change the autogenerated stub
    }

    public function __set(string $name, $value): void
    {
    }
}
